#BlueJ class context
comment0.target=Heap
comment1.params=
comment1.target=Heap()
comment1.text=This\ function\ builds\ a\ new\ heap
comment10.params=
comment10.target=void\ buildHeap()
comment10.text=\r\n\ This\ function\ builds\ a\ heap.\ it\ works\ on\ an\ exist\ array\ with\ numbers\ that\ is\ not\ a\ max-min\ heap,\ and\ make\ it\ a\ max-min\ heap\ \r\n\ by\ ordering\ the\ junctions\ value\r\n
comment11.params=
comment11.target=void\ heapExtractMax()
comment11.text=\r\n\ This\ functino\ delete\ the\ biggest\ value\ in\ the\ heap-the\ root\r\n
comment12.params=
comment12.target=void\ heapExtractMin()
comment12.text=\r\n\ This\ function\ delete\ the\ smallest\ value\ in\ the\ heap-one\ of\ a[2]\ and\ a[3]\r\n
comment13.params=key
comment13.target=void\ heapInsert(double)
comment13.text=\r\n\ This\ functino\ gets\ a\ value\ and\ insert\ it\ to\ the\ heap\ as\ a\ new\ junction\r\n\ @param\ key\ the\ new\ value\r\n
comment14.params=i
comment14.target=int\ heapDelete(int)
comment14.text=\r\n\ This\ function\ gets\ an\ index\ and\ delete\ a[i]\ from\ the\ heap\r\n\ @param\ i\ the\ index\r\n\ @return\ 1\ if\ the\ deleting\ was\ done\ successfuly\ and\ 0\ if\ not\r\n
comment15.params=
comment15.target=void\ printHeap()
comment15.text=\r\n\ This\ function\ prints\ the\ heap\ array\r\n
comment2.params=val
comment2.target=void\ addNumber(double)
comment2.text=This\ function\ gets\ a\ number\ and\ add\ it\ to\ the\ heap\r\n@param\ val\ the\ number
comment3.params=
comment3.target=void\ resetHeapsize()
comment3.text=This\ function\ reset\ the\ heap\ size\ by\ putting\ zero\ in\ it.
comment4.params=i
comment4.target=int\ getDepth(int)
comment4.text=\r\n\ This\ function\ gets\ an\ index\ in\ the\ heap\ and\ returns\ the\ depth\ of\ the\ \r\n\ \ \ \ \ \ \ junction\ of\ this\ index\r\n@param\ i\ the\ index\ of\ junction
comment5.params=
comment5.target=int\ getHeapSize()
comment5.text=This\ function\ returns\ the\ heap\ size\r\n@return\ the\ heap\ size
comment6.params=i
comment6.target=int\ findBiggest(int)
comment6.text=\r\n\ This\ function\ gets\ an\ index\ and\ returns\ the\ biggest\ value\ between\r\n\ the\ junction\ in\ the\ index\ itself,\ its\ two\ sons\ and\ its\ four\ grandchilds\r\n\ @param\ i\ the\ index\ \r\n@return\ the\ index\ of\ maximum\ value
comment7.params=i
comment7.target=int\ findSmallest(int)
comment7.text=\r\n\ This\ function\ gets\ an\ index\ and\ returns\ the\ smallest\ value\ between\r\n\ the\ junction\ in\ the\ index\ itself,\ its\ two\ sons\ and\ its\ four\ grandchilds\r\n\ @param\ i\ the\ index\ \r\n@return\ the\ index\ of\ minimum\ value
comment8.params=i
comment8.target=void\ heapify(int)
comment8.text=\r\n\ This\ function\ gets\ an\ index\ in\ the\ heap\ and\ down\ in\ to\ its\ proper\ place\ in\ the\ heap.\ the\ two\ sub-trees\ -\ the\ right\ and\ the\ left\r\n\ are\ legal\ max-min\ heaps.\r\n\ @param\ i\ the\ index\r\n
comment9.params=i
comment9.target=void\ upHeap(int)
comment9.text=\r\n\ This\ function\ gets\ an\ index\ and\ take\ it\ up\ all\ the\ way\ to\ its\ proper\ place.\ the\ fathers\ of\ a[i]\ are\ legal\ max-min\ heap\r\n\ @param\ i\ the\ index\r\n
numComments=16
